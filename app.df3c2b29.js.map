{"mappings":"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","sources":["source/main.js"],"sourcesContent":["\nconst appDiv = document.getElementById('app')\nconst canvasDiv = document.getElementById('canvas')\nconst healthbarDiv = document.getElementById('healthbar')\n\nconst ctx = canvasDiv.getContext('2d')\n\nconst borderColor = '#990003'\nconst fillColor = '#f1f7ff'\nconst activeColor = '#000107'\nconst squareColor = '#00BFFF'\n\nhealthbarDiv.style.backgroundColor = fillColor\nhealthbarDiv.style.width = '0%'\n\nlet h = 4\nlet w = 4\n\nconst bSize = 0\n\nlet cellSize = 100\n\nlet activeCells = 3\n\nfunction refreshCanvas() {\n  cellSize = 100\n\n  if (window.innerWidth < 446) {\n    cellSize = 72\n  } else if (window.innerWidth > 1024) {\n    cellSize = 128\n  }\n\n  cellSize = 100\n\n  canvasDiv.height = h * (cellSize + bSize) + bSize\n  canvasDiv.width = w * (cellSize + bSize) + bSize\n}\n\nrefreshCanvas()\n\nfunction renderSquare(x, y, cColor) {\n  ctx.fillStyle = cColor\n  const rX = y * (cellSize + bSize) + bSize\n  const rY = x * (cellSize + bSize) + bSize\n  ctx.fillRect(rY, rX, cellSize, cellSize)\n}\n\nfunction render(_borderColor = borderColor, _fillColor = fillColor) {\n  ctx.fillStyle = _borderColor\n  ctx.fillRect(\n    0,\n    0,\n    (cellSize + bSize) * h + bSize,\n    (cellSize + bSize) * w + bSize\n  )\n\n  ctx.fillStyle = _fillColor\n\n  for (let y = 0; y < h; ++y) {\n    for (let x = 0; x < w; ++x) {\n      const rX = y * (cellSize + bSize) + bSize\n      const rY = x * (cellSize + bSize) + bSize\n      ctx.fillRect(rY, rX, cellSize, cellSize)\n    }\n  }\n}\n\nlet speed = 0\nlet clicks = 0\nlet misses = 0\nlet accuracy = 1\n\nconst breakPoint = 4\nlet missStreak = 0\n\nlet state = 'STOP'\nlet clock = 0.0\n\nlet msToLife = 250\n\nlet clickTime = new Date()\nlet hitTime = new Date()\n\nlet startTime = new Date()\nlet hpTime = new Date()\nlet endTime = new Date()\nendTime.setSeconds(-120)\n\nlet clickStamps = []\nlet gameMap = []\n\nconst infoDiv = document.getElementById('information')\n\nfunction addInfo(tlabel, tvalue, title=null) {\n  const el = document.createElement('div')\n  el.classList.add('stats')\n  const label = document.createElement('div')\n  label.classList.add('stats-label')\n  label.textContent = tlabel\n  el.appendChild(label)\n  const value = document.createElement('div')\n  value.classList.add('stats-value')\n  value.textContent = tvalue\n  el.appendChild(value)\n\n  if (title) {\n    el.title = title\n  }\n\n  infoDiv.appendChild(el)\n}\n\nfunction textNumber(number) {\n  tNumber = String(Math.round(number * 100) / 100)\n\n  if (tNumber.slice(-2, -1) == '.') tNumber += '0'\n  if (tNumber.slice(-3, -2) != '.') tNumber += '.00'\n\n  return tNumber\n}\n\nfunction gameover() {\n  if (state == 'RUNNING') {\n    endTime = new Date()\n    state = 'GAMEOVER'\n    clock = 0.0\n\n    healthbarDiv.style.width = '0%'\n    render(borderColor, squareColor)\n\n    if (clicks) {\n      const deltaTime = (endTime - startTime) / 1000\n\n      speed = clicks / deltaTime\n      accuracy = clicks ? clicks / (clicks + misses) : 1\n\n      const minutes = Math.floor(deltaTime / 60)\n\n      if (minutes > 0) {\n        let seconds = Math.floor(deltaTime) % 60\n        if (seconds < 10) {\n          seconds = '0' + seconds\n        }\n        addInfo('time', `${minutes}:${seconds}`)\n      } else {\n        addInfo('time', textNumber(deltaTime) + 's')\n      }\n\n      addInfo('clicks', String(clicks))\n      addInfo('speed', textNumber(speed), 'clicks per second')\n      addInfo('accuracy', textNumber(accuracy * 100) + '%', misses + ' misses')\n      \n      infoDiv.classList.remove('hidden')\n\n      if (localStorage) {\n        let records = []\n        if (localStorage.records) {\n          try {\n            records = JSON.parse(localStorage.records)  \n          } catch (SyntaxError) {\n            delete localStorage.records\n          }\n        }\n        if (records.length >= 0) {\n          records.push([endTime.getTime(), deltaTime, clicks, misses].join(';'))\n          localStorage.records = JSON.stringify(records)\n        }\n      }\n    }\n  }\n}\n\nfunction run() {\n  if (state != 'RUNNING') {\n    return\n  }\n\n  const d = new Date()\n\n  msClock = endTime - d\n\n  if (msClock <= 0) {\n    return gameover()\n  }\n\n  clock = (d - startTime) / 1000\n\n  if (clock > 0) {\n    const dt = endTime - hpTime\n    const hp = (100 * msClock) / dt\n    healthbarDiv.style.width = hp + '%'\n\n    if (dt >= 60000) {\n      if (hp <= 25) {\n        hpTime.setMilliseconds(hpTime.getMilliseconds() + dt * 6.5/10)\n      }\n    }\n  } else {\n    healthbarDiv.style.width = '0%'\n  }\n\n  requestAnimationFrame(run)\n}\n\nfunction randomCell() {\n  const index = Math.floor(Math.random() * gameMap.length)\n  const cell = gameMap[index]\n  const [x, y] = cell.split('.')\n  renderSquare(x, y, squareColor)\n  gameMap.splice(index, 1)\n}\n\nfunction start(reset = false) {\n  if (!reset && new Date() - endTime < 1500) {\n    return\n  }\n\n  infoDiv.classList.add('hidden')\n  infoDiv.innerHTML = ''\n\n  gameMap = []\n  for (let y = 0; y < h; ++y) {\n    for (let x = 0; x < w; ++x) {\n      gameMap.push(`${x}.${y}`)\n    }\n  }\n\n  render()\n\n  for (let i = 0; i < activeCells; ++i) {\n    randomCell()\n  }\n\n  speed = 0\n  clicks = 0\n\n  misses = 0\n  missStreak = 0\n  accuracy = 1\n\n  state = 'RUNNING'\n  clock = 0.0\n\n  msToLife = 250\n\n  startTime = new Date()\n  hpTime = new Date()\n  endTime = new Date()\n  endTime.setSeconds(endTime.getSeconds() + 32)\n\n  clickTime = startTime\n  hitTime = startTime\n\n  clickStamps = []\n\n  requestAnimationFrame(run)\n}\n\nfunction hit(event) {\n  clicks += 1\n\n  if (state == 'RUNNING') {\n    let x, y\n    if ('TouchEvent' in window) {\n      if (event instanceof TouchEvent) {\n        x = event.touches[0].clientX - canvasDiv.offsetLeft\n        y = event.touches[0].clientY - canvasDiv.offsetTop\n      }\n    } else if (event) {\n      x = event.offsetX\n      y = event.offsetY\n    }\n\n    const cellX = Math.floor((x - (x % (cellSize + bSize))) / cellSize)\n    const cellY = Math.floor((y - (y % (cellSize + bSize))) / cellSize)\n\n    if (gameMap.includes(`${cellX}.${cellY}`) || cellY >= h || cellX >= w) {\n      endTime.setMilliseconds(endTime.getMilliseconds() - msToLife)\n\n      misses += 1\n      missStreak += 1\n    } else {\n      endTime.setMilliseconds(endTime.getMilliseconds() + msToLife)\n\n      hitTime = new Date()\n      missStreak = 0\n\n      renderSquare(cellX, cellY, fillColor)\n      randomCell()\n\n      gameMap.push(`${cellX}.${cellY}`)\n    }\n\n    clickTime = new Date()\n    clickStamps.unshift(clickTime)\n\n    if (missStreak >= breakPoint) {\n      gameover()\n    }\n\n    if (msToLife > 200) {\n      msToLife -= 0.8\n    } else if (msToLife > 166) {\n      msToLife -= 0.125\n    } else if (msToLife > 142) {\n      msToLife -= 1 / 150\n    } else if (msToLife > 125) {\n      msToLife -= 0.0016\n    }\n  } else {\n    start()\n  }\n\n  if (window.getSelection) {\n    window.getSelection().removeAllRanges()\n  } else if (document.selection) {\n    document.selection.empty()\n  }\n}\n\nrender(borderColor, squareColor)\n\nconst settingsDiv = document.getElementById('settings')\n\n// const okSettings = settingsDiv.querySelector('#settings-ok')\n// okSettings.addEventListener('click', (e) => {\n//   const sizeSettings = settingsDiv.querySelector('input[name=\"size\"]')\n//   const numberSettings = settingsDiv.querySelector('input[name=\"number\"]')\n//   const size = parseInt(sizeSettings.value)\n//   if (size > 1) {\n//     h = w = size\n//     refreshCanvas()\n//     render(borderColor, squareColor)\n//   }\n//   const number = parseInt(numberSettings.value)\n//   if (number > 0 && number < w) {\n//     activeCells = number\n//   }\n// })\n\nconst toggleBar = settingsDiv.querySelector('#toggle-bar')\ntoggleBar.addEventListener('click', function(e) {\n  const width = parseInt(healthbarDiv.style.width)\n  if ((width + 30) > 100) {\n    healthbarDiv.style.width = '0%'\n  } else {\n    healthbarDiv.style.width = String(width + 30) + '%'\n  }  \n})\n\nconst showInfo = settingsDiv.querySelector('#toggle-info')\nshowInfo.addEventListener('click', function(e) {\n  if (!infoDiv.innerHTML) {\n    addInfo('time', '0' + 's')\n    addInfo('clicks', '0')\n    addInfo('speed', '0')\n    addInfo('accuracy', String(Math.floor(accuracy * 100)) + '%')\n  }\n  infoDiv.classList.toggle('hidden')\n})\n\nconst firstRound = settingsDiv.querySelector('#show-first-round')\nfirstRound.addEventListener('click', function(e) {\n  infoDiv.classList.add('hidden')\n  infoDiv.innerHTML = ''\n\n  gameMap = []\n  for (let y = 0; y < h; ++y) {\n    for (let x = 0; x < w; ++x) {\n      gameMap.push(`${x}.${y}`)\n    }\n  }\n\n  render()\n\n  for (let i = 0; i < activeCells; ++i) {\n    randomCell()\n  }\n})\n\ncanvasDiv.addEventListener('touchstart', (e) => {\n  hit(e)\n  e.preventDefault()\n  return false\n})\ncanvasDiv.addEventListener('mousedown', hit)\ncanvasDiv.parentElement.addEventListener('contextmenu', (e) => {\n  e.preventDefault()\n  return false\n})\n\ndocument.body.addEventListener('keydown', (e) => {\n  if (['Space', 'Escape'].includes(e.code)) {\n    start(true)\n  }\n})\nwindow.addEventListener('resize', (_) => {\n  if (state != 'RUNNING') {\n    refreshCanvas()\n    render(borderColor, squareColor)\n  }\n})\n\nif ('serviceWorker' in navigator && window.location.protocol != 'file:') {\n  navigator.serviceWorker.register(\n    new URL('sw.js')\n  )\n}\n"],"names":["_arrayLikeToArray","arr","len","appDiv","document","getElementById","canvasDiv","healthbarDiv","ctx","getContext","borderColor","fillColor","activeColor","squareColor","style","backgroundColor","width","h","w","bSize","cellSize","activeCells","refreshCanvas","window","innerWidth","height","renderSquare","x","y","cColor","fillStyle","rX","rY","fillRect","render","_borderColor","arguments","length","_fillColor","speed","clicks","misses","accuracy","breakPoint","missStreak","state","clock","msToLife","clickTime","Date","hitTime","startTime","hpTime","endTime","setSeconds","clickStamps","gameMap","infoDiv","addInfo","tlabel","tvalue","title","el","createElement","classList","add","label","textContent","appendChild","value","textNumber","number","tNumber","String","Math","round","slice","gameover","deltaTime","minutes","floor","seconds","concat","remove","localStorage","records","JSON","parse","SyntaxError","push","getTime","join","stringify","run","d","msClock","dt","hp","setMilliseconds","getMilliseconds","requestAnimationFrame","randomCell","index","random","_cell_split","_slicedToArray","split","splice","start","innerHTML","i","getSeconds","hit","event","TouchEvent","touches","clientX","offsetLeft","clientY","offsetTop","offsetX","offsetY","cellX","cellY","includes","unshift","getSelection","removeAllRanges","selection","empty","settingsDiv","toggleBar","querySelector","addEventListener","e","parseInt","showInfo","toggle","firstRound","preventDefault","parentElement","body","code","_","navigator","location","protocol","serviceWorker","register","URL"],"version":3,"file":"app.df3c2b29.js.map"}