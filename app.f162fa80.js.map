{"mappings":"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","sources":["<anon>","source/main.js"],"sourcesContent":["function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar appDiv = document.getElementById('app');\nvar canvasDiv = document.getElementById('canvas');\nvar healthbarDiv = document.getElementById('healthbar');\nvar ctx = canvasDiv.getContext('2d');\nvar borderColor = '#990003';\nvar fillColor = '#f1f7ff';\nvar activeColor = '#000107';\nvar squareColor = '#00BFFF';\nhealthbarDiv.style.backgroundColor = fillColor;\nhealthbarDiv.style.width = '0%';\nvar h = 4;\nvar w = 4;\nvar bSize = 0;\nvar cellSize = 100;\nvar activeCells = 3;\nfunction refreshCanvas() {\n    cellSize = 100;\n    if (window.innerWidth < 446) cellSize = 72;\n    else if (window.innerWidth > 1024) cellSize = 128;\n    cellSize = 100;\n    canvasDiv.height = h * (cellSize + bSize) + bSize;\n    canvasDiv.width = w * (cellSize + bSize) + bSize;\n}\nrefreshCanvas();\nfunction renderSquare(x, y, cColor) {\n    ctx.fillStyle = cColor;\n    var rX = y * (cellSize + bSize) + bSize;\n    var rY = x * (cellSize + bSize) + bSize;\n    ctx.fillRect(rY, rX, cellSize, cellSize);\n}\nfunction render() {\n    var _borderColor = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : borderColor, _fillColor = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : fillColor;\n    ctx.fillStyle = _borderColor;\n    ctx.fillRect(0, 0, (cellSize + bSize) * h + bSize, (cellSize + bSize) * w + bSize);\n    ctx.fillStyle = _fillColor;\n    for(var y = 0; y < h; ++y)for(var x = 0; x < w; ++x){\n        var rX = y * (cellSize + bSize) + bSize;\n        var rY = x * (cellSize + bSize) + bSize;\n        ctx.fillRect(rY, rX, cellSize, cellSize);\n    }\n}\nvar speed = 0;\nvar clicks = 0;\nvar misses = 0;\nvar accuracy = 1;\nvar breakPoint = 4;\nvar missStreak = 0;\nvar state = 'STOP';\nvar clock = 0.0;\nvar msToLife = 250;\nvar clickTime = new Date();\nvar hitTime = new Date();\nvar startTime = new Date();\nvar hpTime = new Date();\nvar endTime = new Date();\nendTime.setSeconds(-120);\nvar clickStamps = [];\nvar gameMap = [];\nvar infoDiv = document.getElementById('information');\nfunction addInfo(tlabel, tvalue) {\n    var title = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n    var el = document.createElement('div');\n    el.classList.add('stats');\n    var label = document.createElement('div');\n    label.classList.add('stats-label');\n    label.textContent = tlabel;\n    el.appendChild(label);\n    var value = document.createElement('div');\n    value.classList.add('stats-value');\n    value.textContent = tvalue;\n    el.appendChild(value);\n    if (title) el.title = title;\n    infoDiv.appendChild(el);\n}\nfunction textNumber(number) {\n    tNumber = String(Math.round(number * 100) / 100);\n    if (tNumber.slice(-2, -1) == '.') tNumber += '0';\n    if (tNumber.slice(-3, -2) != '.') tNumber += '.00';\n    return tNumber;\n}\nfunction gameover() {\n    if (state == 'RUNNING') {\n        endTime = new Date();\n        state = 'GAMEOVER';\n        clock = 0.0;\n        healthbarDiv.style.width = '0%';\n        render(borderColor, squareColor);\n        if (clicks) {\n            var deltaTime = (endTime - startTime) / 1000;\n            speed = clicks / deltaTime;\n            accuracy = clicks ? clicks / (clicks + misses) : 1;\n            var minutes = Math.floor(deltaTime / 60);\n            if (minutes > 0) {\n                var seconds = Math.floor(deltaTime) % 60;\n                if (seconds < 10) seconds = '0' + seconds;\n                addInfo('time', \"\".concat(minutes, \":\").concat(seconds));\n            } else addInfo('time', textNumber(deltaTime) + 's');\n            addInfo('clicks', String(clicks));\n            addInfo('speed', textNumber(speed), 'clicks per second');\n            addInfo('accuracy', textNumber(accuracy * 100) + '%', misses + ' misses');\n            infoDiv.classList.remove('hidden');\n            if (localStorage) {\n                var records = [];\n                if (localStorage.records) try {\n                    records = JSON.parse(localStorage.records);\n                } catch (SyntaxError) {\n                    delete localStorage.records;\n                }\n                if (records.length >= 0) {\n                    records.push([\n                        endTime.getTime(),\n                        deltaTime,\n                        clicks,\n                        misses\n                    ].join(';'));\n                    localStorage.records = JSON.stringify(records);\n                }\n            }\n        }\n    }\n}\nfunction run() {\n    if (state != 'RUNNING') return;\n    var d = new Date();\n    msClock = endTime - d;\n    if (msClock <= 0) return gameover();\n    clock = (d - startTime) / 1000;\n    if (clock > 0) {\n        var dt = endTime - hpTime;\n        var hp = 100 * msClock / dt;\n        healthbarDiv.style.width = hp + '%';\n        if (dt >= 60000) {\n            if (hp <= 25) hpTime.setMilliseconds(hpTime.getMilliseconds() + dt * 6.5 / 10);\n        }\n    } else healthbarDiv.style.width = '0%';\n    requestAnimationFrame(run);\n}\nfunction randomCell() {\n    var index = Math.floor(Math.random() * gameMap.length);\n    var cell = gameMap[index];\n    var _cell_split = _sliced_to_array(cell.split('.'), 2), x = _cell_split[0], y = _cell_split[1];\n    renderSquare(x, y, squareColor);\n    gameMap.splice(index, 1);\n}\nfunction start() {\n    var reset = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n    if (!reset && new Date() - endTime < 1500) return;\n    infoDiv.classList.add('hidden');\n    infoDiv.innerHTML = '';\n    gameMap = [];\n    for(var y = 0; y < h; ++y)for(var x = 0; x < w; ++x)gameMap.push(\"\".concat(x, \".\").concat(y));\n    render();\n    for(var i = 0; i < activeCells; ++i)randomCell();\n    speed = 0;\n    clicks = 0;\n    misses = 0;\n    missStreak = 0;\n    accuracy = 1;\n    state = 'RUNNING';\n    clock = 0.0;\n    msToLife = 250;\n    startTime = new Date();\n    hpTime = new Date();\n    endTime = new Date();\n    endTime.setSeconds(endTime.getSeconds() + 32);\n    clickTime = startTime;\n    hitTime = startTime;\n    clickStamps = [];\n    requestAnimationFrame(run);\n}\nfunction hit(event) {\n    clicks += 1;\n    if (state == 'RUNNING') {\n        var x, y;\n        if (event) {\n            x = event.offsetX;\n            y = event.offsetY;\n            if ('TouchEvent' in window) {\n                if (event instanceof TouchEvent) {\n                    x = event.touches[0].clientX - canvasDiv.offsetLeft;\n                    y = event.touches[0].clientY - canvasDiv.offsetTop;\n                }\n            }\n        }\n        var cellX = Math.floor((x - x % (cellSize + bSize)) / cellSize);\n        var cellY = Math.floor((y - y % (cellSize + bSize)) / cellSize);\n        if (gameMap.includes(\"\".concat(cellX, \".\").concat(cellY)) || cellY >= h || cellX >= w) {\n            endTime.setMilliseconds(endTime.getMilliseconds() - msToLife);\n            misses += 1;\n            missStreak += 1;\n        } else {\n            endTime.setMilliseconds(endTime.getMilliseconds() + msToLife);\n            hitTime = new Date();\n            missStreak = 0;\n            renderSquare(cellX, cellY, fillColor);\n            randomCell();\n            gameMap.push(\"\".concat(cellX, \".\").concat(cellY));\n        }\n        clickTime = new Date();\n        clickStamps.unshift(clickTime);\n        if (missStreak >= breakPoint) gameover();\n        if (msToLife > 200) msToLife -= 0.8;\n        else if (msToLife > 166) msToLife -= 0.125;\n        else if (msToLife > 142) msToLife -= 1 / 150;\n        else if (msToLife > 125) msToLife -= 0.0016;\n    } else start();\n    if (window.getSelection) window.getSelection().removeAllRanges();\n    else if (document.selection) document.selection.empty();\n}\nrender(borderColor, squareColor);\nvar settingsDiv = document.getElementById('settings');\n// const okSettings = settingsDiv.querySelector('#settings-ok')\n// okSettings.addEventListener('click', (e) => {\n//   const sizeSettings = settingsDiv.querySelector('input[name=\"size\"]')\n//   const numberSettings = settingsDiv.querySelector('input[name=\"number\"]')\n//   const size = parseInt(sizeSettings.value)\n//   if (size > 1) {\n//     h = w = size\n//     refreshCanvas()\n//     render(borderColor, squareColor)\n//   }\n//   const number = parseInt(numberSettings.value)\n//   if (number > 0 && number < w) {\n//     activeCells = number\n//   }\n// })\nvar toggleBar = settingsDiv.querySelector('#toggle-bar');\ntoggleBar.addEventListener('click', function(e) {\n    var width = parseInt(healthbarDiv.style.width);\n    if (width + 30 > 100) healthbarDiv.style.width = '0%';\n    else healthbarDiv.style.width = String(width + 30) + '%';\n});\nvar showInfo = settingsDiv.querySelector('#toggle-info');\nshowInfo.addEventListener('click', function(e) {\n    if (!infoDiv.innerHTML) {\n        addInfo('time', \"0s\");\n        addInfo('clicks', '0');\n        addInfo('speed', '0');\n        addInfo('accuracy', String(Math.floor(accuracy * 100)) + '%');\n    }\n    infoDiv.classList.toggle('hidden');\n});\nvar firstRound = settingsDiv.querySelector('#show-first-round');\nfirstRound.addEventListener('click', function(e) {\n    infoDiv.classList.add('hidden');\n    infoDiv.innerHTML = '';\n    gameMap = [];\n    for(var y = 0; y < h; ++y)for(var x = 0; x < w; ++x)gameMap.push(\"\".concat(x, \".\").concat(y));\n    render();\n    for(var i = 0; i < activeCells; ++i)randomCell();\n});\ncanvasDiv.addEventListener('touchstart', function(e) {\n    hit(e);\n    e.preventDefault();\n    return false;\n});\ncanvasDiv.addEventListener('mousedown', hit);\ncanvasDiv.parentElement.addEventListener('contextmenu', function(e) {\n    e.preventDefault();\n    return false;\n});\ndocument.body.addEventListener('keydown', function(e) {\n    if ([\n        'Space',\n        'Escape'\n    ].includes(e.code)) start(true);\n});\nwindow.addEventListener('resize', function(_) {\n    if (state != 'RUNNING') {\n        refreshCanvas();\n        render(borderColor, squareColor);\n    }\n});\nif ('serviceWorker' in navigator && window.location.protocol != 'file:') navigator.serviceWorker.register(new URL('sw.js', location));\n\n//# sourceMappingURL=app.f162fa80.js.map\n","\nconst appDiv = document.getElementById('app')\nconst canvasDiv = document.getElementById('canvas')\nconst healthbarDiv = document.getElementById('healthbar')\n\nconst ctx = canvasDiv.getContext('2d')\n\nconst borderColor = '#990003'\nconst fillColor = '#f1f7ff'\nconst activeColor = '#000107'\nconst squareColor = '#00BFFF'\n\nhealthbarDiv.style.backgroundColor = fillColor\nhealthbarDiv.style.width = '0%'\n\nlet h = 4\nlet w = 4\n\nconst bSize = 0\n\nlet cellSize = 100\n\nlet activeCells = 3\n\nfunction refreshCanvas() {\n  cellSize = 100\n\n  if (window.innerWidth < 446) {\n    cellSize = 72\n  } else if (window.innerWidth > 1024) {\n    cellSize = 128\n  }\n\n  cellSize = 100\n\n  canvasDiv.height = h * (cellSize + bSize) + bSize\n  canvasDiv.width = w * (cellSize + bSize) + bSize\n}\n\nrefreshCanvas()\n\nfunction renderSquare(x, y, cColor) {\n\n  ctx.fillStyle = cColor\n  const rX = y * (cellSize + bSize) + bSize\n  const rY = x * (cellSize + bSize) + bSize\n  ctx.fillRect(rY, rX, cellSize, cellSize)\n}\n\nfunction render(_borderColor = borderColor, _fillColor = fillColor) {\n  ctx.fillStyle = _borderColor\n  ctx.fillRect(\n    0,\n    0,\n    (cellSize + bSize) * h + bSize,\n    (cellSize + bSize) * w + bSize\n  )\n\n  ctx.fillStyle = _fillColor\n\n  for (let y = 0; y < h; ++y) {\n    for (let x = 0; x < w; ++x) {\n      const rX = y * (cellSize + bSize) + bSize\n      const rY = x * (cellSize + bSize) + bSize\n      ctx.fillRect(rY, rX, cellSize, cellSize)\n    }\n  }\n}\n\nlet speed = 0\nlet clicks = 0\nlet misses = 0\nlet accuracy = 1\n\nconst breakPoint = 4\nlet missStreak = 0\n\nlet state = 'STOP'\nlet clock = 0.0\n\nlet msToLife = 250\n\nlet clickTime = new Date()\nlet hitTime = new Date()\n\nlet startTime = new Date()\nlet hpTime = new Date()\nlet endTime = new Date()\nendTime.setSeconds(-120)\n\nlet clickStamps = []\nlet gameMap = []\n\nconst infoDiv = document.getElementById('information')\n\nfunction addInfo(tlabel, tvalue, title=null) {\n  const el = document.createElement('div')\n  el.classList.add('stats')\n  const label = document.createElement('div')\n  label.classList.add('stats-label')\n  label.textContent = tlabel\n  el.appendChild(label)\n  const value = document.createElement('div')\n  value.classList.add('stats-value')\n  value.textContent = tvalue\n  el.appendChild(value)\n\n  if (title) {\n    el.title = title\n  }\n\n  infoDiv.appendChild(el)\n}\n\nfunction textNumber(number) {\n  tNumber = String(Math.round(number * 100) / 100)\n\n  if (tNumber.slice(-2, -1) == '.') tNumber += '0'\n  if (tNumber.slice(-3, -2) != '.') tNumber += '.00'\n\n  return tNumber\n}\n\nfunction gameover() {\n  if (state == 'RUNNING') {\n    endTime = new Date()\n    state = 'GAMEOVER'\n    clock = 0.0\n\n    healthbarDiv.style.width = '0%'\n    render(borderColor, squareColor)\n\n    if (clicks) {\n      const deltaTime = (endTime - startTime) / 1000\n\n      speed = clicks / deltaTime\n      accuracy = clicks ? clicks / (clicks + misses) : 1\n\n      const minutes = Math.floor(deltaTime / 60)\n\n      if (minutes > 0) {\n        let seconds = Math.floor(deltaTime) % 60\n        if (seconds < 10) {\n          seconds = '0' + seconds\n        }\n        addInfo('time', `${minutes}:${seconds}`)\n      } else {\n        addInfo('time', textNumber(deltaTime) + 's')\n      }\n\n      addInfo('clicks', String(clicks))\n      addInfo('speed', textNumber(speed), 'clicks per second')\n      addInfo('accuracy', textNumber(accuracy * 100) + '%', misses + ' misses')\n      \n      infoDiv.classList.remove('hidden')\n\n      if (localStorage) {\n        let records = []\n        if (localStorage.records) {\n          try {\n            records = JSON.parse(localStorage.records)  \n          } catch (SyntaxError) {\n            delete localStorage.records\n          }\n        }\n        if (records.length >= 0) {\n          records.push([endTime.getTime(), deltaTime, clicks, misses].join(';'))\n          localStorage.records = JSON.stringify(records)\n        }\n      }\n    }\n  }\n}\n\nfunction run() {\n  if (state != 'RUNNING') {\n    return\n  }\n\n  const d = new Date()\n\n  msClock = endTime - d\n\n  if (msClock <= 0) {\n    return gameover()\n  }\n\n  clock = (d - startTime) / 1000\n\n  if (clock > 0) {\n    const dt = endTime - hpTime\n    const hp = (100 * msClock) / dt\n    healthbarDiv.style.width = hp + '%'\n\n    if (dt >= 60000) {\n      if (hp <= 25) {\n        hpTime.setMilliseconds(hpTime.getMilliseconds() + dt * 6.5/10)\n      }\n    }\n  } else {\n    healthbarDiv.style.width = '0%'\n  }\n\n  requestAnimationFrame(run)\n}\n\nfunction randomCell() {\n  const index = Math.floor(Math.random() * gameMap.length)\n  const cell = gameMap[index]\n  const [x, y] = cell.split('.')\n  renderSquare(x, y, squareColor)\n  gameMap.splice(index, 1)\n}\n\nfunction start(reset = false) {\n  if (!reset && new Date() - endTime < 1500) {\n    return\n  }\n\n  infoDiv.classList.add('hidden')\n  infoDiv.innerHTML = ''\n\n  gameMap = []\n  for (let y = 0; y < h; ++y) {\n    for (let x = 0; x < w; ++x) {\n      gameMap.push(`${x}.${y}`)\n    }\n  }\n\n  render()\n\n  for (let i = 0; i < activeCells; ++i) {\n    randomCell()\n  }\n\n  speed = 0\n  clicks = 0\n\n  misses = 0\n  missStreak = 0\n  accuracy = 1\n\n  state = 'RUNNING'\n  clock = 0.0\n\n  msToLife = 250\n\n  startTime = new Date()\n  hpTime = new Date()\n  endTime = new Date()\n  endTime.setSeconds(endTime.getSeconds() + 32)\n\n  clickTime = startTime\n  hitTime = startTime\n\n  clickStamps = []\n\n  requestAnimationFrame(run)\n}\n\nfunction hit(event) {\n  clicks += 1\n\n  if (state == 'RUNNING') {\n    let x, y\n\n    if (event) {\n      x = event.offsetX\n      y = event.offsetY\n\n      if ('TouchEvent' in window) {\n        if (event instanceof TouchEvent) {\n          x = event.touches[0].clientX - canvasDiv.offsetLeft\n          y = event.touches[0].clientY - canvasDiv.offsetTop\n        }\n      }\n    } \n\n    const cellX = Math.floor((x - (x % (cellSize + bSize))) / cellSize)\n    const cellY = Math.floor((y - (y % (cellSize + bSize))) / cellSize)\n\n    if (gameMap.includes(`${cellX}.${cellY}`) || cellY >= h || cellX >= w) {\n      endTime.setMilliseconds(endTime.getMilliseconds() - msToLife)\n\n      misses += 1\n      missStreak += 1\n    } else {\n      endTime.setMilliseconds(endTime.getMilliseconds() + msToLife)\n\n      hitTime = new Date()\n      missStreak = 0\n\n      renderSquare(cellX, cellY, fillColor)\n      randomCell()\n\n      gameMap.push(`${cellX}.${cellY}`)\n    }\n\n    clickTime = new Date()\n    clickStamps.unshift(clickTime)\n\n    if (missStreak >= breakPoint) {\n      gameover()\n    }\n\n    if (msToLife > 200) {\n      msToLife -= 0.8\n    } else if (msToLife > 166) {\n      msToLife -= 0.125\n    } else if (msToLife > 142) {\n      msToLife -= 1 / 150\n    } else if (msToLife > 125) {\n      msToLife -= 0.0016\n    }\n  } else {\n    start()\n  }\n\n  if (window.getSelection) {\n    window.getSelection().removeAllRanges()\n  } else if (document.selection) {\n    document.selection.empty()\n  }\n}\n\nrender(borderColor, squareColor)\n\nconst settingsDiv = document.getElementById('settings')\n\n// const okSettings = settingsDiv.querySelector('#settings-ok')\n// okSettings.addEventListener('click', (e) => {\n//   const sizeSettings = settingsDiv.querySelector('input[name=\"size\"]')\n//   const numberSettings = settingsDiv.querySelector('input[name=\"number\"]')\n//   const size = parseInt(sizeSettings.value)\n//   if (size > 1) {\n//     h = w = size\n//     refreshCanvas()\n//     render(borderColor, squareColor)\n//   }\n//   const number = parseInt(numberSettings.value)\n//   if (number > 0 && number < w) {\n//     activeCells = number\n//   }\n// })\n\nconst toggleBar = settingsDiv.querySelector('#toggle-bar')\ntoggleBar.addEventListener('click', function(e) {\n  const width = parseInt(healthbarDiv.style.width)\n  if ((width + 30) > 100) {\n    healthbarDiv.style.width = '0%'\n  } else {\n    healthbarDiv.style.width = String(width + 30) + '%'\n  }  \n})\n\nconst showInfo = settingsDiv.querySelector('#toggle-info')\nshowInfo.addEventListener('click', function(e) {\n  if (!infoDiv.innerHTML) {\n    addInfo('time', '0' + 's')\n    addInfo('clicks', '0')\n    addInfo('speed', '0')\n    addInfo('accuracy', String(Math.floor(accuracy * 100)) + '%')\n  }\n  infoDiv.classList.toggle('hidden')\n})\n\nconst firstRound = settingsDiv.querySelector('#show-first-round')\nfirstRound.addEventListener('click', function(e) {\n  infoDiv.classList.add('hidden')\n  infoDiv.innerHTML = ''\n\n  gameMap = []\n  for (let y = 0; y < h; ++y) {\n    for (let x = 0; x < w; ++x) {\n      gameMap.push(`${x}.${y}`)\n    }\n  }\n\n  render()\n\n  for (let i = 0; i < activeCells; ++i) {\n    randomCell()\n  }\n})\n\ncanvasDiv.addEventListener('touchstart', (e) => {\n  hit(e)\n  e.preventDefault()\n  return false\n})\ncanvasDiv.addEventListener('mousedown', hit)\ncanvasDiv.parentElement.addEventListener('contextmenu', (e) => {\n  e.preventDefault()\n  return false\n})\n\ndocument.body.addEventListener('keydown', (e) => {\n  if (['Space', 'Escape'].includes(e.code)) {\n    start(true)\n  }\n})\nwindow.addEventListener('resize', (_) => {\n  if (state != 'RUNNING') {\n    refreshCanvas()\n    render(borderColor, squareColor)\n  }\n})\n\nif ('serviceWorker' in navigator && window.location.protocol != 'file:') {\n  navigator.serviceWorker.register(\n    new URL('sw.js', location)\n  )\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","document","getElementById","canvasDiv","healthbarDiv","ctx","getContext","borderColor","fillColor","squareColor","style","backgroundColor","width","cellSize","refreshCanvas","window","innerWidth","height","h","w","renderSquare","x","y","cColor","fillStyle","rX","rY","fillRect","render","_borderColor","arguments","_fillColor","speed","clicks","misses","accuracy","missStreak","state","msToLife","clickTime","Date","startTime","hpTime","endTime","setSeconds","clickStamps","gameMap","infoDiv","addInfo","tlabel","tvalue","title","el","createElement","classList","add","label","textContent","appendChild","value","textNumber","number","tNumber","String","Math","round","slice","gameover","deltaTime","minutes","floor","seconds","concat","remove","localStorage","records","JSON","parse","SyntaxError","push","getTime","join","stringify","run","d","msClock","clock","dt","hp","setMilliseconds","getMilliseconds","requestAnimationFrame","randomCell","index","random","_cell_split","_array_with_holes","isArray","cell","split","_iterable_to_array_limit","_s","_e","_i","Symbol","iterator","_arr","_n","_d","call","next","done","err","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","constructor","name","from","test","_non_iterable_rest","TypeError","splice","start","reset","innerHTML","getSeconds","hit","event","offsetX","offsetY","TouchEvent","touches","clientX","offsetLeft","clientY","offsetTop","cellX","cellY","includes","unshift","getSelection","removeAllRanges","selection","empty","settingsDiv","toggleBar","querySelector","addEventListener","e","parseInt","showInfo","toggle","firstRound","preventDefault","parentElement","body","code","_","navigator","location","protocol","serviceWorker","register","URL"],"version":3,"file":"app.f162fa80.js.map"}